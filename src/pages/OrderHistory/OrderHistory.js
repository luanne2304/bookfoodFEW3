import React, { useState,useEffect } from "react";
import { Container, Table, Button } from "react-bootstrap";
import { useNavigate } from "react-router-dom";
import services from "../../utils/services";

const OrderHistory = () => {
  const navigate = useNavigate();
  const [orders,setOrders] = useState([
  ]);

  // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt ƒë∆°n h√†ng
  const viewOrderDetail = (orderId) => {
    navigate(`/OrderDetail/${orderId}`);
  };

  const payment=async(id,value)=>{
    try{
      const res = await services.payment(id,value);
      console.log("thanh toan th√†nh c√¥ng",res)
    }catch(e){
      console.log("thanh to√°n th·∫•t b·∫°i",e)
    }
  }

  useEffect(()=>{
    const fetch=async()=>{
      const res = await services.getOrderHistory();
      const formattedData = res.map((item) => ({
        id: item.id.toString(),
        discount: parseInt(item.discount),
        total: parseInt(item.totalPrice),
        payment: item.payment,
        status:item.status,
        isReviewed:item.isReviewed,
        isPay:item.isPay,
        note:item.note,
      }));
      console.log(res)
      setOrders(formattedData);
    }
    fetch()
  },[])

  return (
    <Container className="mt-4">
      <h2>üìú L·ªãch S·ª≠ Mua H√†ng</h2>
      {orders.length === 0 ? (
        <p>B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.</p>
      ) : (
        <Table striped bordered hover>
          <thead>
            <tr>
              <th>M√£ ƒë∆°n</th>
              <th>Gi√° Gi·∫£m (VNƒê)</th>
              <th>Th√†nh Ti·ªÅn (VNƒê)</th>
              <th>Ghi ch√∫</th>
              <th>Ph∆∞∆°ng th·ª©c thanh to√°n</th>
              <th>Tr·∫°ng th√°i ƒë∆°n h√†ng</th>
              <th>-</th>
            </tr>
          </thead>
          <tbody>
            {orders.map((order) => (
              <tr key={order.id}>
                <td>{order.id}</td>
                <td>-{order.discount.toLocaleString()}</td>
                <td>{order.total.toLocaleString()}</td>
                <td>{order.note}</td>
                <td>  {order.payment == 0
                  ? `V√≠ ƒëi·ªán t·ª≠ (${order.isPay? ("ƒê√£ thanh to√°n") :("Ch∆∞a thanh to√°n")})` 
                  : order.payment == 1
                  ? "Ti·ªÅn m·∫∑t"
                  : "N/A"}
                </td>
                <td><td>
                {order.status == 0
                  ? "ƒêang ch·ªù x√°c nh·∫≠n"
                  : order.status == 1
                  ? "ƒêang chu·∫©n b·ªã m√≥n"
                  : "ƒê√£ giao"}
              </td></td>
                <td>
                {order.payment == 0 && !order.isPay && (
                    <Button variant="danger" onClick={()=>payment(order.id,order.total.toLocaleString())} >
                      Thanh to√°n
                    </Button>
                    )}
                  <Button variant="info" onClick={() => viewOrderDetail(order.id)}>
                    Xem chi ti·∫øt
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      )}
    </Container>
  );
};

export default OrderHistory;
